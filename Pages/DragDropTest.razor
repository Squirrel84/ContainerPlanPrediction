@page "/dragdrop"
@using ContainerPlanPrediction.Data
@inject DragAndDropService<string> DragAndDropService
<style>
    .draggable {
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
        cursor: move;
    }

    .drop-target {
        border: 1px dashed #ebebeb;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
    }
</style>

<Draggable Data="@draggableDataA">
    <div class="draggable">
        Draggable A
    </div>
</Draggable>

<Draggable Data="@draggableDataB">
    <div class="draggable">
        Draggable B
    </div>
</Draggable>


<div class="row">
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="1" Bay="1">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "1" && x.Bay == "1");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="1" Bay="2">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "1" && x.Bay == "2");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="1" Bay="3">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "1" && x.Bay == "3");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
</div>
<div class="row">
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="2" Bay="1">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "2" && x.Bay == "1");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="2" Bay="2">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "2" && x.Bay == "2");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="2" Bay="3">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "2" && x.Bay == "3");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
</div>
<div class="row">
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="3" Bay="1">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "3" && x.Bay == "1");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="3" Bay="2">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "3" && x.Bay == "2");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
    <div class="col-sm-4" style="border:1px solid #333">
        <DropTarget T="String" Drop="@OnDrop" Row="3" Bay="3">
            @{
                var drop = DragAndDropService.Drops.FirstOrDefault(x => x.Row == "3" && x.Bay == "3");
                if (drop != null)
                {
                    <div>@drop.Data</div>
                }
                else
                {
                    <div class="drop-target" style="width:100px;height:50px;"></div>
                }
            }
        </DropTarget>
    </div>
</div>

@if (dropMessage != null)
{
    @((MarkupString)dropMessage)
}

@functions {
    string draggableDataA = "Draggable Data A";
    string draggableDataB = "Draggable Data B";

    string dropMessage = null;

    void OnDrop(string data, string row, string bay)
    {
        DragAndDropService.OnDrop(data, row, bay);

        dropMessage = null;
        foreach (var drop in DragAndDropService.Drops)
        {
            dropMessage += $"Dropped: {drop.Data} on row: {drop.Row} in bay: {drop.Bay}<br />";
        }

        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }
}